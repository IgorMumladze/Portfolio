pipeline{
    agent any

    environment{
        ECR_URL = "644435390668.dkr.ecr.us-east-1.amazonaws.com"
        ECR_REPO = "igor-foodist"
        GITOPS_REPO_URL = 'git@github.com:Efiop97/FoodistGitOps.git'
        POSTGRES_DB = credentials('POSTGRES_DB')
        POSTGRES_PASSWORD = credentials('POSTGRES_PASSWORD')
        POSTGRES_USER = credentials('POSTGRES_USER')
    }

    stages{

        stage('Checkout') {
            steps {
                deleteDir()
                checkout scm
            }
        }

        stage("Build Docker images"){
            steps{
                echo 'building app image'
                sh 'docker build -t foodist .'
                sh 'docker build -t foodistdb -f ./dockerfile.postgres .'
                sh 'docker build -t foodistnginx -f ./dockerfile.nginx .'
            }
        }

        stage("Deploy local for health check"){
            steps{
                echo 'deploying app'
                sh 'docker compose up -d'
            }
        }
        
        stage("health check"){
            steps{
                script{
                    healthCheck()
                }
            }
        }

        stage("Version calculation") {
            when{
                branch 'main'
            }
            steps {
                script {
                    versionCalculation()
                }
            }
        }


        stage('Push to ECR'){
            when{
                branch 'main'
            }
            steps{
                script{
                    pushToECR()
                }
            }
        }

        stage("Git Tag & Clean"){
            when{
                branch 'main'
            }
            steps {
                script {
                    sshagent(credentials: ['GitHubSSH']) {
                        sh """
                            git clean -fd
                            git tag ${CALCULATED_VERSION}
                            git reset
                            git push origin --tags
                        """
                    }
                }
            }
        } 

        
        stage("Deployment"){
            when{
                branch 'main'
            }
            stages{
   
                stage("Clone GitOps"){
                    steps{
                        script {
                            sshagent(credentials: ['GitHubSSH']){
                                sh "git clone ${GITOPS_REPO_URL}"
                                dir("FoodistGitOps") {
                                    sh 'git checkout main'
                                    sh 'ls'
                                }
                            }
                        }
                    }
                }

                stage('Update Image tag'){
                    steps{
                        dir("FoodistGitOps/apps/foodist") {
                            sh """
                                yq -yi \'.foodist.image = \"${ECR_URL}/${ECR_REPO}:${CALCULATED_VERSION}\"\' values.yaml
                            """
                        }
                    }
                }

                stage('Push Changes'){
                    steps{
                        script {
                            sshagent(credentials: ['GitHubSSH']){
                                dir("FoodistGitOps") {
                                    sh """
                                        git add .
                                        git commit -m 'Jenkins Deploy - Build No. ${BUILD_NUMBER}, Version ${CALCULATED_VERSION}'
                                        git push origin main
                                    """
                                }
                            }
                        }

                    }
                }
            }
        }
    }
    
    
    post{
        always{
            sh 'docker compose down'
        }
        success{
            
        }
        failure{
            
        }
    }
}

def healthCheck(){
    echo 'doing app health check'
    sh 'sleep 5'
    sh 'curl -fsSLI http://nginx:80/health'
}

def versionCalculation(){
    sshagent(credentials: ['GitHubSSH']) {
    sh "git fetch --tags"
    def latestTag = sh(script: "git tag | sort -V | tail -n1", returnStdout: true).trim()
    echo "Latest tag is: ${latestTag}"

    def versionPattern = ~/^v?(\d+)\.(\d+)\.(\d+)$/
    def match = versionPattern.matcher(latestTag)

    if (match.matches()) {
        echo "Incrementing patch version"
        def major = match.group(1).toInteger()
        def minor = match.group(2).toInteger()
        def patch = match.group(3).toInteger() + 1
        CALCULATED_VERSION = "${major}.${minor}.${patch}"
        echo "Calculated version: v${CALCULATED_VERSION}"
    } else {
        echo "No existing tags or unrecognized format. Setting version to 1.0.0"
        CALCULATED_VERSION = "1.0.0"
        echo "Calculated version: v${CALCULATED_VERSION}"
        }
    }
}

def pushToECR() {
    sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_URL}'
    sh "docker tag foodist:latest ${ECR_URL}/${ECR_REPO}:${CALCULATED_VERSION}"
    sh "docker push ${ECR_URL}/${ECR_REPO}:${CALCULATED_VERSION}"
}